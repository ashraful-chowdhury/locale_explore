/// Generated by NStack, do not modify this file.

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:nstack/models/app_open_platform.dart';
import 'package:nstack/models/language.dart';
import 'package:nstack/models/localize_index.dart';
import 'package:nstack/models/nstack_config.dart';
import 'package:nstack/nstack.dart';
import 'package:nstack/partial/section_key_delegate.dart';

export 'package:nstack/models/app_open_platform.dart';

// Update this file by running:
// - `flutter pub run build_runner build`, if your package depends on Flutter
// - `pub run build_runner build` otherwise

class Localization {
  final defaultSection = const _DefaultSection();

  const Localization();
}

class _DefaultSection extends SectionKeyDelegate {
  const _DefaultSection() : super('default');

  String get hello => get('hello', "Hello World!");
  String get home => get('home', "Home");
}

const _config = NStackConfig(
    projectId: 'ddsKDunb9h4Ebhr5sfhpI8joL5TR81qBrKbE',
    apiKey: '3o75fsVaGxlVxkUbINrZFZI1uiM83BZd87KY');

final _languages = [
  LocalizeIndex(
      id: 1657,
      url: null,
      lastUpdatedAt: null,
      shouldUpdate: false,
      language: Language(
          id: 12,
          name: 'English (US)',
          locale: 'en-US',
          direction: 'LRM',
          isDefault: true,
          isBestFit: true)),
  LocalizeIndex(
      id: 1658,
      url: null,
      lastUpdatedAt: null,
      shouldUpdate: false,
      language: Language(
          id: 14,
          name: 'Spanish (Spain)',
          locale: 'es-ES',
          direction: 'LRM',
          isDefault: false,
          isBestFit: false)),
];

const _bundledTranslations = {
  'en-US':
      r'''{"data":{"default":{"hello":"Hello World!","home":"Home"}},"meta":{"language":{"id":12,"name":"English (US)","locale":"en-US","direction":"LRM","is_default":false,"is_best_fit":false},"platform":{"id":671,"slug":"mobile"}}}''',
  'es-ES':
      r'''{"data":{"default":{"hello":"Hola Mundo!","home":"Hogar"}},"meta":{"language":{"id":14,"name":"Spanish (Spain)","locale":"es-ES","direction":"LRM","is_default":false,"is_best_fit":false},"platform":{"id":671,"slug":"mobile"}}}''',
};

final _nstack = NStack<Localization>(
    config: _config,
    localization: const Localization(),
    availableLanguages: _languages,
    bundledTranslations: _bundledTranslations,
    pickedLanguageLocale: '',
    debug: kDebugMode);

class NStackScope extends InheritedWidget {
  final NStack<Localization> nstack;
  final NStackState state;
  final String checksum;

  NStackScope(
      {Key? key,
      required Widget child,
      required this.state,
      required this.nstack,
      required this.checksum})
      : super(key: key, child: child);

  static NStackState of(BuildContext context) =>
      context.dependOnInheritedWidgetOfExactType<NStackScope>()!.state;

  @override
  bool updateShouldNotify(NStackScope oldWidget) =>
      checksum != oldWidget.checksum;
}

class NStackWidget extends StatefulWidget {
  final Widget child;
  final AppOpenPlatform? platformOverride;
  final VoidCallback? onComplete;

  const NStackWidget(
      {Key? key, required Widget child, this.platformOverride, this.onComplete})
      : child = child,
        super(key: key);

  @override
  NStackState createState() => NStackState();
}

class NStackState extends State<NStackWidget> {
  final NStack<Localization> nstack = _nstack;
  bool _initializedNStack = false;

  late Future<bool> _nstackInitFuture;

  @override
  void initState() {
    super.initState();
    _nstackInitFuture = _nstack.init();
  }

  changeLanguage(Locale locale) async {
    await _nstack
        .changeLocalization(locale)
        .whenComplete(() => setState(() {}));
  }

  @override
  Widget build(BuildContext context) {
    if (!_initializedNStack) {
      _nstack
          .appOpen(Localizations.localeOf(context),
              platformOverride: widget.platformOverride)
          .whenComplete(() => widget.onComplete?.call());
      _initializedNStack = true;
    }

    return FutureBuilder(
        future: _nstackInitFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            return NStackScope(
              child: widget.child,
              state: this,
              nstack: this.nstack,
              checksum: nstack.checksum,
            );
          } else {
            return SizedBox();
          }
        });
  }
}

/// Allows to access the Nstack Localization using the BuildContext
extension NStackWidgetExtension on BuildContext {
  Localization get localization => NStackScope.of(this).nstack.localization;
}

/// Allows to access the Nstack Localization from StatefulWidget's State
extension NStackStateExtension<T extends StatefulWidget> on State<T> {
  Localization get localization => context.localization;
}
